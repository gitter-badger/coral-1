type Option(T):
  | None
  | Some(T)

# func show*(d: Int32): clib.sprintf("%d", d)
# func show*(d: Int64): clib.sprintf("%ld", d)

# func show(d):
#   #[d : Option(T)]
#   #[T : show (:T)]
#   #$ d :: T1 && T1 = Option(T2) && show(_:T2)
#   match d:
#     | None: "None"
#     #$ type(x) show
#     | Some(x): "Some(" + show x + ")"


# show (Option.None)
# show (Option.Some(12345))




# type Int64Option:
#   | None
#   | Some(Int64)

# func show(d: Int64Option):
#   match d:
#     None: printf "Int-None "
#     Some(val): printf("Int-%d ", val)

# show (Int64Option.None)
# show (Int64Option.Some(31337))
