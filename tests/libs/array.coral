extern "C" printf : Fn[..., Void]
extern "C" sizeof : Fn[..., Int32]
extern "C" malloc : Fn[Int32, Ptr[Int8]]

# A fixed-size generic Array
type Array[T]:
  length : Int32
  buf : Ptr[Int8]

  # func new(n : Int32, initializer : Fn[Int32, T]): ()
  # func new(n : Int32, val : T): ()
  # TODO: initialize with T.empty
  func new(n : Int32):
     set buf = malloc (n * sizeof T)
     set length = n
  func _get(i : Int32): Ptr._get(T, buf + (i * sizeof T))
  func _set(i : Int32, val : T): Ptr._set(buf + (i * sizeof T), val)

# $Array = struct { Int32, Ptr[Int8] }
func $Array$new(this, n):
  set this$buf = malloc (n * sizeof T)
  set this$length = n

func $Array$_get(this, i):
  # TODO: range check
  $Ptr$_get(this.T, this.buf + i * sizeof this.T)

func $Array$_set(this, i, val):
  # TODO: range check
  $Ptr$_set(this.buf + i * sizeof T, val)

type Int32Array = Array[Int32]
let x = Int32Array.new 3
x._set(0, 10) # set x[0] = 3
x._set(1, 11) # set x[1] = 1
x._set(1, 12) # set x[2] = 5

printf("Hello Array\n")
printf("%d ", x[0])
printf("%d ", x[1])
printf("%d ", x[2])

# First Class Type Parameters
let a = Array[Int32].new 20
let b = Array[Int32].new(10, a[0])
let T = Array[Int32].T
let t : T = 0

printf("%d ", a[0])

# TODO
# let z : LiteralSeq[Int] = [20, 21, 23, 24]
# let y : Int32Array = [20, 21, 23, 24]

# TODO
# typeof x == T
# typeof a = Array[Int32]
# typeof b = Array[Int32]
# typeof T = ?
# typeof Int32 = ?
# typeof Array = FT[?, ?]
# typeof Array[Int32] = ?
# typeof Array[Int32].T = ?
