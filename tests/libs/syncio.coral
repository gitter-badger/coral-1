# codegen-output: "[test]\n[foobar]\n"
# This is the synchronous input / output module
# We should really be using async for everything in the long run though,
# especially in core so we're not wasting thread time
type platform:
 extern "C" read  : Fn[Int32, Ptr[Int8], Int32]
 extern "C" write : Fn[Int32, Ptr[Int8], Int32]

type FdByteReader:
  let fd: Int32
  func read(n):
    # TODO buffer input
    let buf = Array(Int8).create n
    let m = platform.read(fd, buf, intNative n)
    ByteString.new(buf, m)

type FdByteWriter:
  let fd: Int32
  func write(bs: ByteString):
    platform.write(fd, bs.buf, bs.length)

type StringFromByteReader(ByteReaderT):
  let bytes: ByteReaderT
  func new(fd):
    set bytes = ByteReaderT(fd)
  func new(readbytes):
    set bytes = readbytes
  func read(n):
    TextString.new(bytes.read(n))

type FdStringReader = StringFromByteReader(FdByteReader)
type FdStringWriter = StringFromByteWriter(FdByteWriter)

_stdin = FdByteReader(0)
_stdout = FdByteWriter(1)
_stderr = FdByteWriter(2)
stdin = FdStringReader(_stdin)
stdout = FdStringWriter(_stdout)
stderr = FdStringWriter(_stderr)

stdout.write("[test]\n")
stderr.write("[foobar]\n")
