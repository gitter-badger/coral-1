# Return Type Inference is the most basic type inference.
# If a function returns value of type T, its return type is also T
func returnsInt (): 5
func returnsIntVar ():
  let m = 3
  m
func returnsIntParam(n: Int32):
  n
func returnsIntCall(n): returnsIntVar()
func returnsAddition(): returnsInt() + returnsIntCall()
func returnsString() : "asdf"

# Argument Type Inference is where you can propagate a known
# Parameter type of a function or operator to an unknown argument / operand
`extern func strlen : Int32 (s:Ptr)
# Returns Func[Ptr, Int32]
func StringParameter(s):
  return strlen(s)
# Returns Func[Int32, Int32] -- currently doesn't compile
# func IntegerAddition(n):
#   return 1 + n

# Parametric Inference is where a function has free Type variables
# Returns Func[A, A]
func id(n): n
# Returns Func[A, B, B]
func foo(a, b): b

func main():
  printf ("%d\n", returnsInt())
  printf ("%d\n", returnsIntParam(100))
  printf ("%d\n", returnsIntCall(200))
  printf ("%d\n", returnsAddition())
  printf ("%s\n", returnsString())
  0
