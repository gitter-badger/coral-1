`extern func strlen : Int32 (str:Ptr)
`extern func pcre2_match_data_create_8 : Ptr (size:Int32, context:Ptr)
`extern func pcre2_compile_8 : Ptr (pat:Ptr, len:Int64, opt:Int32, err:Ptr, offset:Ptr, context:Ptr)
`extern func pcre2_get_ovector_pointer_8 : Ptr (data:Ptr)
`extern func pcre2_match_8 : Int32 (regex:Ptr, subject:Ptr, len:Int64, start:Int64, opt:Int32, data:Ptr, context:Ptr)

func regex_Pattern_new : Ptr (pattern:Ptr):
  let error = 5
  let offset = 5
  let len = strlen pattern
  let regex = pcre2_compile_8(pattern, len, 0, addrof error, addrof offset, 0)
  if error <= 100:
    regex
  else:
    printf("[Pos %d] Error: %d\n", offset, error)

func regex_matches (regex:Ptr, subject:Ptr):
  let len = strlen subject
  let pos = 0
  let matchdata = pcre2_match_data_create_8(10, 0)
  struct(regex=regex, subject=subject, len=len, matchdata=matchdata, pos=0, ov=addrof pos)

func regex_Matches_move (m : Struct[Ptr, Ptr, Int32, Ptr, Int32, Ptr]):
  let m = m
  let matchdata = m.field3
  let c : Int64 = 0
  if pcre2_match_8(m.field0, m.field1, m.field2, m.field4, 0, matchdata, c) > 0:
    let ov = pcre2_get_ovector_pointer_8(matchdata)
    struct(r=m.field0,t=m.field1,l=m.field2,m=matchdata,s=derefi (ov + 8),ov=ov)
  else:
    struct(r=0,t=0,l=0,m=0,s=1,a=0)

func regex_Matches_printCurrent (m : Struct[Ptr, Ptr, Int32, Ptr, Int32, Ptr]):
  let m = m
  let start = derefi (m.field5)
  let end = derefi ((m.field5) + 8)
  if start >= 0:
    printf("  Match: %.*s\n", end - start, (m.field1 + start))

func main():
  let pattern = regex_Pattern_new "\b\w+?\b"
  let matches = regex_matches(pattern, "'crabcakes' contains abc but not abcde!!!")
  while matches.field4 < matches.field2:
    set matches = regex_Matches_move matches
    regex_Matches_printCurrent matches
