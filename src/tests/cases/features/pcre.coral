`extern func strlen : Int32 (str:Ptr)
`extern func pcre2_match_data_create_8 : Ptr (size:Int32, context:Ptr)
`extern func pcre2_compile_8 : Ptr (pat:Ptr, len:Int32, opt:Int32, err:Ptr, offset:Ptr, context:Ptr)
`extern func pcre2_get_ovector_pointer_8 : Ptr (data:Ptr)
`extern func pcre2_match_8 : Int32 (regex:Ptr, subject:Ptr, len:Int32, start:Int32, opt:Int32, data:Ptr, context:Ptr)

func regex_Pattern_new : Ptr (pattern:Ptr):
  let error = 5
  let offset = 5
  let len = strlen pattern
  let regex = pcre2_compile_8(pattern, len, 0, addrof error, addrof offset, 0)
  if error <= 100:
    return regex
  else:
    printf("[Pos %d] Error: %d\n", offset, error)
    return 0

func regex_matches (regex:Ptr, subject:Ptr):
  let len = strlen subject
  let pos = 0
  let matchdata = pcre2_match_data_create_8(10, 0)
  struct(regex=regex, subject=subject, len=len, matchdata=matchdata, pos=0)

func regex_Matches_move : Int32 (m:Ptr): 0
func regex_Matches_current : Ptr (m:Ptr): 0
func regex_Match_toString : Ptr (m:Ptr) : 0

func main():
  let subject = "'crabcakes' contains abc but not abcde"
  let pattern = regex_Pattern_new "a"
  let matches = regex_matches(pattern, subject)
  printf("Matches: %p \n", matches)
  printf("Pattern: %p \n", pattern)
  # while regex_Matches_move(matches):
  #    printf("%s", regex_Match_toString (regex_Matches_current matches))
  printf("done")
  0
