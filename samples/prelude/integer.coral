class Monoid of T:
   id: T
   func op (a: T, b: T, r: T)

class Group of T:
   extends Monoid
   func inv (a: T, b: T, r: T)
   
class Integer of T:
   extends Group as Add with { id = Zero; op = (+); inv = (-) }
   extends Monoid as Mult with { id = One; op = (*); }
   func (%) (a: T, b: T, r: T)
   func (//) (a: T, b: T, r: T)
   func (/%) (a: T, b: T, r: (T, T))
   func (+%) (a: T, b: T, r: (T, T))
   
type Bool
type Int8
type Int16
type Int32
type Int64
type IntBig:
   chunks: Arr[Int64]
   
func (+) (a:Bool, b:Bool): return `iadd`(a, b)
func (+) (a:Int8, b:Int8): return `iadd`(a, b)
func (+) (a:Int16, b:Int16): return `iadd`(a, b)
func (+) (a:Int32, b:Int32): return `iadd`(a, b)
func (+) (a:Int64, b:Int64): return `iadd`(a, b)
func (+) (a:IntBig, b:IntBig):
   let i = 0
   let m = max(a.chunks.len, b.chunks.len)
   let chunks = Arr[i64].new(m + 1);
   reduce 0 ((i) => if i < 
   let c = 0
   while i <= m:
       let s = i65 (a.chunks[i] + b.chunks[i] + c)
       set c = s >> 64
       chunks[i] = i64 s
   if c:
      chunks[i] = 1
   else:
      chunks = chunks.resize m
   IntBig(chunks=chunks)
   
class Float
type Float16
type Float32
type Float64
type Decimal

class Rational
type RatBig