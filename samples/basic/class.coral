class SizeOf of C:
  call: Int32

let sizeof[T] = SizeOf.call[T]

impl SizeOf for Int1:
  call = 1
impl SizeOf for Int8:
  call = 1
impl SizeOf for Int32:
  call = 4
impl SizeOf for Int64:
  call = 8
impl SizeOf for Ptr[_]:
  call = 8

class Integer of C:
  Zero : C
  Add : Fn[C, C, C]
  Mul : Fn[C, C, C]
  Sub : Fn[C, C, C]

impl Integer for Int64:
  let Zero = _LLVMConstInt(0)
  func Add(a, b): _LLVMBuildAdd(a, b)
  func Mul(a, b): _LLVMBuildMul(a, b)
  func Sub(a, b): _LLVMBuildSub(a, b)
  func Zwop(a, b): a * 3 + b * 4

func (+) (a, b):
  Integer.Add(a, b)

func (*) (a, b):
  Integer.Mul(a, b)

func (**) (a, b):
  Integer.Zwop(a, b)
  
func test():
  let a: Int64 = 3
  let b: Int64 = 4
  a ** b

func test : Int64():
  let a: Int64 = 3
  let b: Int64 = 4

class Print of C:
  call: Fn[C, Void]

impl Print for Int32:
  func call(i):
    printf("%d", i)

impl Print for Int1:
  func call(i):
    if i:
       printf("True")
    else:
       printf("False")

type Foobar:
  | Foo
  | Bar
  | Baz: Int8
  | Speem: struct {
     x: Int1
     y: Foobar
  }
     
impl Print for Foobar:
  func call(i: Foobar):
    match i with:
      Foo:
        printf "Foo"
      Bar:
        printf "Bar"
      Baz as z:
        printf("Baz[%d]\n", z)
      Speem as z:
        printf "Speem("
	z.x
	call(z.y)
	