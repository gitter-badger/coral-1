type CStr = Ptr[Int8]
type FilePtr = Ptr[Int8]

extern "C" printf : Fn[Ptr[Int8], ..., Void]
extern "C" strlen : Fn[Ptr[Int8], Int32]

# File IO
extern "C" open : Fn[Ptr[Int8], Int32, Int32]
extern "C" write : Fn[Int32, Ptr[Int8], Int32, Void]
extern "C" read : Fn[Int32, Ptr[Int8], Int32, Int32]
extern "C" close : Fn[Int32, Void]

extern "C" malloc : Fn[Int32, Ptr[Int8]]
extern "C" free :   Fn[Ptr[Int8]]
extern "C" realloc : Fn[Ptr[Int8], Int32, Ptr[Int8]]

func main : Void ():
  printf "Hello IO\n"
  let buf : Ptr[Int8] = malloc 1024
  let f : Ptr[Int8] = open("/proc/self/stat", 0)
  let n : Int32 = read(f, buf, 1000)
  printf("Read [%d] bytes\n", n)
  printf("Buf[%s]\n", buf)
  
# type FdReader:
#   func new(fd):
#     set h = fdopen(fd, "r")
#     set buf = malloc 1024

#   func read(n):
#     read(h, buf, 1023)
#     buf
    
# type FdWriter:
#   func new(fd):
#     set h = fdopen(fd, "r")
#   func write(cstr):
#     write(h, cstr, strlen cstr)

# type Lazy<T>:
#   func new(*args):
#      set inner = T.new(*args)

# let stdin  = FdReader(0)
# let stdout = FdWriter(1)
# let stderr = FdWriter(2)

# func main : Void ():
#   printf "io test\n"
#   stdout.write("hello world\n")
#   stderr.write("goodbye world\n")
#   let fout = FileWriter.new("/dev/stdout")
#   fout.write("foobar\n")
#   let fin = FileReader.new("/proc/self/cmdline")
#   let s = fin.read(10)
#   printf s
  